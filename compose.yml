services:
  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v2.10
    security_opt:
      - no-new-privileges:true
    command:
      - "--api.dashboard=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.default.acme.tlschallenge=true"
      - "--certificatesresolvers.default.acme.email=example@gmail.com"
      - "--certificatesresolvers.default.acme.storage=/etc/traefik/acme.json"

    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "homarr.relativeSubdomain=dashboard"
      - "homarr.icon=simple-icons:traefikproxy"

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      PUID: 1000
      PGID: 1000
    volumes:
      - ./data/homepage/config:/app/config
      - ./data/homepage/icons:/app/public/icons
      - ./var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`localhost`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=default"
    ports:
      - 3000:3000

  redis:
    container_name: redis
    image: redis:6.2-alpine
    restart: always
    ports:
      - 6379:6379
    command: >
      redis-server --save 20 1 --loglevel warning --requirepass mysecretpassword
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 5

  # GUI for checking what's in Redis
  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight
    environment:
      RI_APP_PORT: 80
      RI_APP_HOST: '0.0.0.0'
    ports:
      - 8080:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redisinsight.rule=Host(`redisinsight.localhost`)"
      - "traefik.http.services.redisinsight.loadbalancer.server.port=80"
      - "homarr.relativeSubdomain=redisinsight"
      - "homarr.icon=devicon-plain:redis-wordmark"
    volumes:
      - redisinsight_cache:/data

  db:
    container_name: db
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: dialogporten
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d dialogporten" ]
      interval: 10s
      timeout: 20s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin4.rule=Host(`pgadmin4.localhost`)"
      - "traefik.http.routers.pgadmin4.entrypoints=websecure"
      - "traefik.http.routers.pgadmin4.tls.certresolver=default"
  bff:
    container_name: bff
    restart: always
    build:
      context: .
      dockerfile: ./packages/bff/Dockerfile
      target: build
    environment:
      DB_CONNECTION_STRING: postgres://postgres:mysecretpassword@db:5432/dialogporten
      HOSTNAME: https://app.localhost
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      ENABLE_GRAPHIQL: true
      SESSION_SECRET: IDPortenSessionSecret2023MoreLettersBlaBla
      REDIS_CONNECTION_STRING: redis://:mysecretpassword@redis:6379/0
      PORT: 80
      NODE_ENV: production
      COOKIE_SECURE: false
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
      APPLICATIONINSIGHTS_ENABLED: ${APPLICATIONINSIGHTS_ENABLED}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bff.rule=Host(`app.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.bff.entrypoints=websecure"
      - "traefik.http.routers.bff.tls.certresolver=default"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "pnpm --filter bff run docker"
    develop:
      watch:
        - action: sync
          path: ./packages/bff/
          target: /app/packages/bff/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: sync+restart
          path: ./packages/bff-types-generated/
          target: /app/packages/bff-types-generated/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: sync+restart
          path: ./packages/fastify-graphiql/
          target: /app/packages/fastify-graphiql/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: rebuild
          path: pnpm-lock.yaml
          target: /app/pnpm-lock.yaml

  bff-migration:
    container_name: bff-migration
    command: sh -c "pnpm --filter bff run docker"
    build:
      context: .
      dockerfile: ./packages/bff/Dockerfile
      target: build
    environment:
      DB_CONNECTION_STRING: postgres://postgres:mysecretpassword@db:5432/dialogporten
      HOSTNAME: https://app.localhost
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      SESSION_SECRET: IDPortenSessionSecret2023MoreLettersBlaBla
      REDIS_CONNECTION_STRING: redis://:mysecretpassword@redis:6379/0
      TYPEORM_MIGRATIONS: src/migrations/*.ts
      TYPEORM_MIGRATIONS_DIR: src/migrations
      MIGRATION_RUN: true
    depends_on:
      db:
        condition: service_healthy

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
      target: build
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
      - "traefik.http.services.myservice.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=default"
    develop:
      watch:
        - action: sync
          path: ./packages/frontend/
          target: /app/packages/frontend/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: sync+restart
          path: ./packages/bff-types-generated/
          target: /app/packages/bff-types-generated/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: rebuild
          path: pnpm-lock.yaml
          target: /app/pnpm-lock.yaml
  docs:
    container_name: docs
    build:
      context: .
      dockerfile: ./packages/docs/Dockerfile
      target: build
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.localhost`)"
      - "traefik.http.routers.docs.entrypoints=websecure"
      - "traefik.http.routers.docs.tls.certresolver=default"
    develop:
      watch:
        - action: sync
          path: ./packages/docs/
          target: /app/packages/docs/
          ignore:
            - node_modules/
            - .azure/
            - .git/
        - action: rebuild
          path: pnpm-lock.yaml
          target: /app/pnpm-lock.yaml

volumes:
  pgadmin_data:
  postgres_data:
  redisinsight_cache:
    driver: local
